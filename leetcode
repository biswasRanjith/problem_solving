/*
Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.
*/


/**
 * @param {number[]} nums
 * @return {number}
 */


var longestSubarray = function(nums) {
    let i=0,j=0,del=0,max = 0;
    while(i<nums.length){
        if(nums[i]===1 || del === 0){
            if(nums[i]===0)del++;
            max = Math.max(i-j+1-del, max);
            i++
        }else{
            if(nums[j]==0) del =0;
            j++;
        }
        
    }
    return nums.length === max ? max-1 : max;

};


/**
Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
**/
