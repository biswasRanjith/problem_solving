Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
substrings
 respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true


/**
 * @param {string} s1
 * @param {string} s2
 * @param {string} s3
 * @return {boolean}
 */
var isInterleave = function(s1, s2, s3) {
     if (s3.length !== s1.length + s2.length) return false;

  let matched =false;
  
  //for holding results obtained on prelooked index for short circuit and avoid re calculation
  const valid= {};

  const check = (s1_indx, s2_indx, s3_indx) => {
  //reached till end of target string so we found a match
    if (s3_indx === s3.length) {
        matched = true;
    }
	
	// if position in parent strings is checked just returen that 
    if(valid[`${s1_indx}${s2_indx}`] !== undefined)
        return valid[`${s1_indx}${s2_indx}`];
	
	//if match for target string current character is found in first string continue with that 
    if (!matched && s3[s3_indx] === s1[s1_indx] ) {
        check(s1_indx + 1, s2_indx, s3_indx + 1);
    }
	
	//if match found for target string current character found in second string continue with that
    if (!matched && s3[s3_indx] === s2[s2_indx] ) {
        check(s1_indx, s2_indx + 1, s3_indx + 1);
    }
	
	//store the decision made on current indexs of sources string.
    valid[`${s1_indx}${s2_indx}`] = matched;
	
    return matched;
  };

  check(0,0,0);
  return matched
};
